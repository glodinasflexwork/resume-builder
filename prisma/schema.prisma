// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile information
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  resumes       Resume[]
}

// Resume model to store all resume data
model Resume {
  id             String           @id @default(cuid())
  title          String           @default("Untitled Resume")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userId         String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId     String
  template       Template         @relation(fields: [templateId], references: [id])
  colorScheme    String           @default("default")
  personalDetails PersonalDetails?
  experiences    Experience[]
  educations     Education[]
  skills         Skill[]
  languages      Language[]
  courses        Course[]
  activities     Activity[]
  hobbies        Hobby[]
  references     Reference[]
  websites       Website[]
}

// Template model for resume templates
model Template {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  thumbnail   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resumes     Resume[]
}

// Personal details section
model PersonalDetails {
  id        String   @id @default(cuid())
  resumeId  String   @unique
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  firstName String
  lastName  String
  jobTitle  String?
  email     String?
  phone     String?
  address   String?
  city      String?
  country   String?
  zipCode   String?
  summary   String?
  photo     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Work experience section
model Experience {
  id          String   @id @default(cuid())
  resumeId    String
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  position    String
  company     String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  current     Boolean  @default(false)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Int      @default(0)
}

// Education section
model Education {
  id          String   @id @default(cuid())
  resumeId    String
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  institution String
  degree      String?
  field       String?
  location    String?
  startDate   DateTime
  endDate     DateTime?
  current     Boolean  @default(false)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Int      @default(0)
}

// Skills section
model Skill {
  id        String   @id @default(cuid())
  resumeId  String
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  name      String
  level     String?  // e.g., "Expert", "Intermediate", "Beginner"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Int      @default(0)
}

// Languages section
model Language {
  id        String   @id @default(cuid())
  resumeId  String
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  name      String
  level     String?  // e.g., "Native", "Fluent", "Intermediate", "Basic"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Int      @default(0)
}

// Courses section
model Course {
  id          String   @id @default(cuid())
  resumeId    String
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  name        String
  institution String?
  startDate   DateTime?
  endDate     DateTime?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Int      @default(0)
}

// Extra-curricular activities section
model Activity {
  id          String   @id @default(cuid())
  resumeId    String
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  name        String
  organization String?
  startDate   DateTime?
  endDate     DateTime?
  current     Boolean  @default(false)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Int      @default(0)
}

// Hobbies section
model Hobby {
  id        String   @id @default(cuid())
  resumeId  String
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Int      @default(0)
}

// References section
model Reference {
  id        String   @id @default(cuid())
  resumeId  String
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  name      String
  company   String?
  position  String?
  email     String?
  phone     String?
  hidden    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Int      @default(0)
}

// Websites & Social Links section
model Website {
  id        String   @id @default(cuid())
  resumeId  String
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  label     String?  // e.g., "LinkedIn", "Portfolio", "GitHub"
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Int      @default(0)
}
